"""Utilities module"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/utilities.ipynb.

# %% auto 0
__all__ = ['canonicalize', 'mol_to_smiles', 'mol_from_smiles', 'mols_to_smiles', 'mols_from_smiles']

# %% ../nbs/utilities.ipynb 3
from rdkit import Chem

# %% ../nbs/utilities.ipynb 4
def canonicalize(smi:str, # Input molecule in SMILES.
                 clear_stereo:bool=False, # If True, clears stereochemistry of the molecule (remove the @@).
                 )->str: # Canonicalised SMILES string.
    "This function returns the canonicalised smiles representation and has the option to clear stereochemistry"
    mol = Chem.MolFromSmiles(smi)
    if clear_stereo:
        Chem.RemoveStereochemistry(mol)
    return Chem.MolToSmiles(mol, isomericSmiles=True)

# %% ../nbs/utilities.ipynb 6
def mol_to_smiles(mol:Chem.rdchem.Mol, # molecule to convert into SMILES string
                  )->str: # canonicalized SMILES string
    "This function converts a molecule to a SMILES string."
    return canonicalize(Chem.MolToSmiles(mol))

# %% ../nbs/utilities.ipynb 8
def mol_from_smiles(smi:str, # Input molecule in SMILES.
                    )->Chem.rdchem.Mol: # Output molecule.
    "This function converts a SMILES string to a molecule."
    return Chem.MolFromSmiles(Chem.CanonSmiles(smi))

# %% ../nbs/utilities.ipynb 10
def mols_to_smiles(mols:list[Chem.rdchem.Mol], # Input molecules
                   )->list[str]: # Output molecules in SMILES
    "This function converts a list of molecules to a list of SMILES strings."
    return [mol_to_smiles(mol) for mol in mols]

# %% ../nbs/utilities.ipynb 12
def mols_from_smiles(smis, # Input molecules
                     )->list[Chem.rdchem.Mol]: # Output molecules.
    "This function converts a list of SMILES strings to a list of molecules."
    return [mol_from_smiles(smi) for smi in smis]
